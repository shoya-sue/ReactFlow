{
  "react": {
    "functional_component": {
      "prefix": "rfc",
      "body": [
        "import { FC } from 'react';",
        "",
        "interface I${1:Component}Props {",
        "  ${2:prop}: ${3:type};",
        "}",
        "",
        "export const ${1:Component}: FC<I${1:Component}Props> = ({ ${2:prop} }) => {",
        "  return (",
        "    <div>",
        "      ${4:content}",
        "    </div>",
        "  );",
        "};"
      ]
    },
    "custom_hook": {
      "prefix": "rhook",
      "body": [
        "import { useState, useEffect } from 'react';",
        "",
        "export const use${1:Hook} = (${2:params}) => {",
        "  const [state, setState] = useState(${3:initialState});",
        "",
        "  useEffect(() => {",
        "    ${4:effect}",
        "  }, [${5:deps}]);",
        "",
        "  return {",
        "    state,",
        "    setState",
        "  };",
        "};"
      ]
    }
  },
  "testing": {
    "component_test": {
      "prefix": "rtest",
      "body": [
        "import { render, screen } from '@testing-library/react';",
        "import userEvent from '@testing-library/user-event';",
        "import { ${1:Component} } from './${1:Component}';",
        "",
        "describe('${1:Component}', () => {",
        "  it('should render correctly', () => {",
        "    render(<${1:Component} ${2:props} />);",
        "    expect(screen.getByTestId('${3:testId}')).toBeInTheDocument();",
        "  });",
        "});"
      ]
    }
  }
} 